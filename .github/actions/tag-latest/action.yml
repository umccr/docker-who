name: tag-latest
description: |
  Tag the latest version of each of the repositories.
  Credit where credit is due:
    * https://stackoverflow.com/a/57579982/6946787
    * https://dille.name/blog/2018/09/20/how-to-tag-docker-images-without-pulling-them/



inputs:
  docker_username:
    description: docker username used to log into docker
    required: true
  docker_access_token:
    description: docker access token used to be piped into login commnad
    required: true
  docker_registry_name:
    description: name of the registry we wish to access
    required: false
    default: "https://registry-1.docker.io/"
  repo_dir:
    description: directory with all the repositories in it
    required: false
    default: "repositories"
  docker_organisation:
    description: namespace that holds the docker repos
    required: false
    default: "umccr"


runs:
  using: ubuntu-20.04  # This ensures we have python3 as our python default
  steps:
    - shell: bash
      run: |
        # Setup for failure
        set -euo pipefail

        # Update commands
        sudo apt-get update -y

        # Install packaging
        pip3 install packaging

    - shell: python
      run: |
        ## IMPORTS ##
        from pathlib import Path
        import requests
        import os
        import json
        import packaging
        from datetime import datetime

        ## Globals ##
        ACCEPT_HEADER="application/vnd.docker.distribution.manifest.list.v2+json"  # Fat manifest

        ## FUNCTIONS ##
        def get_repos(repos_dir):
            """
            Get list of repos in the directory
            """
            # Ensures is a directory in top level of repos_dir input
            return list(dir for dir in Path(repos_dir).glob("*/") if dir.is_dir())

        def get_latest_version(repo_dir):
            """
            Get the latest controlled version
            """
            # Get versions as folder names
            versions = list(dir.name for dir in Path(repo_dir).glob("*/"))

            # Initialise latest versions
            for i, version in enumerate(versions):
              try:
                version.parse(versions[i])
              except packging.version.InvalidVersion:
                continue
              else:
                latest_version = versions[i]
                break
            else:
              # Did not find a correct version
              return None

            # Now compare versions
            for j, version in versions[i+1:]:
              # Get versions
              try:
                version.parse(versions[j])
              except packaging.version.InvalidVersion:
                continue

              # Compare versions, assign new if larger
              if version.parse(latest_version) < version.parse(versions[i]):
                latest_version = versions[i]

            return latest_version


        def get_docker_token_for_repo(registry_name, repo):
            """
            Get the push/pull token for this docker repo
            """

            # PARAMS="service=registry.docker.io&scope=repository:$TARGET_NS_REPO:push&scope=repository:$TARGET_NS_REPO:pull"
                          #TOKEN=$(curl --user "$DOCKERHUB_USERNAME:$DOCKERHUB_PASSWORD" \
                          #    "https://auth.docker.io/token?$PARAMS" \
                          #    | jq -r '.token'
                          #)

        def list_docker_repo_tags(registry_name, repo, token):
            """
            List of current tags for this docker repo
            """
            # FIXME - just try get one tag and then the next etc.

        def get_docker_image_manifest(registry_name, repo, tag, token):
            """
            Get the image manifest json for a given tag of a docker repo
            """
            # versioned_manifest=$(curl -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json" "https://registry-1.docker.io/v2/$TARGET_NS_REPO/manifests/$TAG" \
                          #    -H "Authorization:Bearer $TOKEN")


        def get_docker_shasum_from_image_manifest(image_manifest):
            """
            Get the image checksum from the manifest
            Under .history[0].v1Compatibility | fromjson | .container_config.Image
            """

        def get_docker_creation_date_from_image_manifest(image_manifest):
            """
            Get the image checksum from the manifest
            Under '.history[0].v1Compatibility | fromjson | .created
            """

        def push_docker_manifest_to_tag(registry_name, repo, tag, image_manifest, token):
            """
            Push the docker manifest to the registry
            """

            # url -X PUT -H "Authorization:Bearer $TOKEN" -H "Content-type: application/vnd.docker.distribution.manifest.v2+json" -d "$versioned_manifest" "https://registry-1.docker.io/v2/$TARGET_NS_REPO/manifests/latest"


        # Get inputs
        docker_user_name = "${{ inputs.docker_user_name }}"
        docker_access_token = "${{ inputs.docker_access_token }}"
        docker_registry_name = "${{ inputs.docker_registry_name }}"
        repos_dir = "${{ inputs.repos_dir }}"
        docker_organisation = "${{ inputs.docker_organisation }}"

        # Get repos
        repos = get_repos(repos_dir)

        # Go through each repo and update 'latest' tag
        for repo in repos:

          # Get "latest" version
          latest_version = get_latest_version(repo_dir)
          if latest_version is None:
            continue

          # Get docker token for this repo
          docker_token = get_docker_token_for_repo(docker_registry_name, repo)

          # List docker repo tags
          docker_tags_list = list_docker_repo_tags(docker_registry_name, repo, docker_token)

          # Check this latest version is in the tags list
          if latest_version not in docker_tags_list:
            # Can't continue if we can't find this tag
            continue

          # Get manifest of latest version
          versioned_manifest = get_docker_image_manifest(docker_registry_name, repo, latest_version, docker_token)

          # Check if "latest" tag is on registry
          if "latest" not in docker_tags_list:
            # Not on registry, push it up
            push_docker_manifest_to_tag(docker_registry_name, repo, "latest", versioned_manifest, docker_token)
            # Aaand we're done!
            continue

          # Otherwise get the latest manifest
          latest_manifest = get_docker_image_manifest(docker_registry_name, repo, "latest", docker_token)

          # Compare checksums
          if get_docker_shasum_from_image_manifest(versioned_manifest) == get_docker_shasum_from_image_manifest(latest_manifest):
            # Checksums are the same - nothing to do
            continue

          # Compare timestamps
          # Only push latest if it was created before latest_version
          if get_docker_creation_date_from_image_manifest(versioned_manifest) < get_docker_shasum_from_image_manifest(latest_manifest):
            # Latest manifest was created AFTER, nothing to do
            continue

          # If we get to here it means that the checksums are different and the versioned_image was created after
          # the 'latest' tag. Therefore we update the latest tag
          push_docker_manifest_to_tag(docker_registry_name, repo, "latest", versioned_manifest, docker_token)



